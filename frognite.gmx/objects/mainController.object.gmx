<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//-----------------------------Variables-------------------------------------------

//If save file doesn't exist, create it. If it does, load it
global.datafile = ds_map_secure_load("frognite_data.txt");
if(global.datafile == -1){
    global.datafile = ds_map_create();
    
    ds_map_add(global.datafile, "currentSkin", s_frog_0);
    global.currentSkin = ds_map_find_value(global.datafile, "currentSkin");
    
    ds_map_add(global.datafile, "highScore", 0);
    global.highScore = ds_map_find_value(global.datafile, "highScore");
    
    ds_map_add(global.datafile, "seenDirections", false);
    global.seenDirections = ds_map_find_value(global.datafile, "seenDirections");
    
    
    ds_map_add(global.datafile, "hasSkins", false);
    global.hasSkins = ds_map_find_value(global.datafile, "hasSkins");
    
    ds_map_secure_save(global.datafile, "frognite_data.txt");
}
else{
    global.currentSkin = ds_map_find_value(global.datafile, "currentSkin");
    global.highScore = ds_map_find_value(global.datafile, "highScore");
    global.seenDirections = ds_map_find_value(global.datafile, "seenDirections");
    global.hasSkins = ds_map_find_value(global.datafile, "hasSkins");
}

ds_map_destroy(global.datafile);
/*
//Purchased IAP DS Map---------------------------------------------------------
global.iapmap = ds_map_secure_load("iap_data.dat");
if(global.iapmap == -1){
    global.iapmap = ds_map_create();
    
    ds_map_add(global.iapmap, "skinPack", false);
    global.skinPack = ds_map_find_value(global.iapmap, "skinPack");
    
    //iap_restore_all();
    
    ds_map_secure_save(global.iapmap, "iap_data.dat");
}
else{
    global.skinPack = ds_map_find_value(global.iapmap, "skinPack");
}

//Activating IAP DS Map----------------------------------------------------------
if(global.skinPack == false){
    var iap_activate_map = ds_map_create();
    var productList = ds_list_create();
    //Create iap
    ds_map_add(iap_activate_map , "id", "skinPack"); //get this from gplay
    ds_list_add(productList, iap_activate_map);
    // Activate IAP
    iap_activate(productList);
    // Clean up
    ds_map_destroy(iap_activate_map);
    ds_list_destroy(productList);
}*/
//Automatic Google Play Login----------------------------------------------------

instance_create(0,0,obj_iap);
//Ads
adsInit();
adsUseTest();

global.levelTime = 0;
var gapTime = 0;
spawnTimeChange = 0;
global.recentTick = 0;
cTime = 0;
global.adPlaced = false;

global.emptyLane = 0;

global.btnPressed = false;
global.currentTrasition = "none";
global.newHigh = false;
global.canShoot = true;
global.lastShot = 0;
global.alteredCanShoot = false;

//Moves the frog forward to the correct location
global.frogYNext = 0;
global.frogAdjust = 0;

//Holds the ramp to be built next
global.currentRamp = "across";

//Whether or not the player is able to build
global.canBuild = true;

global.currentSpeed = 1.5;
global.speedCo = 0;
global.enemySpeed = global.currentSpeed * 1.1;
//global.buildSpeed = 1.5;

//Holds the image index of the current ghost ramp. 0-1 across, 2-3 up, 4-5 down
global.currentGhost = 0;

//Hold the X and Y of the next ramp to be built
global.nextBuildX = 0;
global.nextBuildY = 0;

//Half the width and height of the ramps. For placement purposes
global.halfBuildWidth = 32;
global.halfBuildHeight = 32;

//Adjusts the Y of the current ghost ramp (result of only using one ghost object)
global.ghostYNumber = 0;

//The current "lane" the player is in. 1, 2, 3
global.currentHeight = 1;

//Holds the id of the ghost object to be referenced by the ghost script
global.theGhost = 0;

//Ghost is limited by maximum or minimum height
global.heightRestricted = false;

//Checks if the player has been killed
global.gameOn = false;

global.currentMusic = game_music_1;
global.musicNumber = 1;

global.frogPlaying = false;

jumpNum = -1;
chooseEnemy = true;
spawnedOne = false;

draw_set_font(LuckiestGuy);
draw_set_colour(c_black);
draw_set_halign(fa_right);

//-------------------------------------Setup-------------------------------------

//Place the backgrounds
setupBackgrounds();
//Go to the menu
goToMenu("null");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.gameOn == true){
    if (os_is_paused()){
        global.gameOn = false;
        if(global.canShoot == true){
            global.canShoot = false;
            global.alteredCanShoot = true;
        }
        background_hspeed[0] = 0;
        background_hspeed[1] = 0;
        audio_pause_sound(global.currentMusic);
        if(audio_is_playing(enemy_air)){ audio_pause_sound(enemy_air); }
        if(audio_is_playing(pickaxe)){ audio_pause_sound(pickaxe); }
        if(audio_is_playing(enemy_tree)){ audio_pause_sound(enemy_tree); }
        if(audio_is_playing(enemy_missile)){ audio_pause_sound(enemy_missile); }
        if(audio_is_playing(enemy_plane)){ audio_pause_sound(enemy_plane); }
        instance_create(320, 180, o_pause_bg);
        instance_create(320, 180, o_unpause_btn);
        exit;
    }
    
    updateRamps();
    
    global.nextBuildX = global.justBuilt.x + (global.halfBuildWidth * 2);
    global.theGhost.x = global.nextBuildX + global.halfBuildWidth;
    global.theGhost.y = global.nextBuildY + global.ghostYNumber;
    
    if(global.justBuilt.x &lt;= 128){
        build(global.currentRamp);
    }
    
    global.theFrog.x = (global.justBuilt.x + global.halfBuildWidth) + global.frogAdjust;
    
    //Update time spent on level (in seconds)
    cTime = get_timer();
    global.levelTime += (cTime - global.recentTick) * .000001;
    global.recentTick = cTime;
    
    /*if(global.levelTime - global.lastShot &gt; 5){ 
        global.canShoot = true
    }
    else{
        global.canShoot = false;
    }*/
    
    
    //Update time since last enemy spawned (in seconds)
    gapTime = (global.levelTime - global.lastSpawnedTime);

    //Check if an enemy needs to spawn, then spawn it, then reset lastSpawnedTime
    if(global.spawnTimeBase &gt;= .75){
        global.spawnTimeBase = 3.15 - (global.currentSpeed * .25); //change enemy spawning
    }

    if(gapTime &gt;= global.spawnTimeBase - spawnTimeChange){
        spawnEnemy();
        global.lastSpawnedTime = global.levelTime;
    }
    
    if(global.musicNumber != 5){
        if(global.levelTime &gt; (global.musicNumber * 12.5)){
            if(global.frogPlaying == false){
                global.frogPlaying = true;
                audio_pause_sound(global.currentMusic);
                frogSound = audio_play_sound(frog_noise, 1, false);
            }
            
            if(!audio_is_playing(frogSound)){
                global.musicNumber += 1;
                musicScript();
                global.frogPlaying = false;
            }
        }
    }
    
    //if(global.currentSpeed){
        global.currentSpeed = (global.levelTime * (.1 + global.speedCo)) + 2; //change frog speed
        global.enemySpeed = global.currentSpeed * 1.05;
        if(global.speedCo &lt;= .05){
            global.speedCo = global.levelTime * .001;
       }
        show_debug_message(global.speedCo);
    //}
    
    updateEnemies();
    
    background_hspeed[0] = -global.currentSpeed * .008;
    background_hspeed[1] = -global.currentSpeed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.gameOn == true){
    if(mouse_x &gt; 64){
        if(mouse_y &lt; 180){
            ghost("up");
            if(global.currentHeight != 2){
                global.currentRamp = "up";
            }
        }
        else{
            ghost("down");
            if(global.currentHeight != 0){
                global.currentRamp = "down";
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
